// Comprehensive test for JSON Typed Parsing (Phase 7.0)
// Tests all features: optional fields, default values, nested classes, arrays

// Basic class with all field types
BasicTypes {
    int8: i8
    int16: i16
    int32: i32
    int64: i64
    uint8: u8
    uint16: u16
    uint32: u32
    uint64: u64
    float32: f32
    float64: f64
    text: string
    flag: bool
}

// Class with optional fields
OptionalFields {
    id: u32
    name: string
    email?: string
    age?: u32
    verified?: bool
}

// Class with default values
DefaultValues {
    host?: string = "localhost"
    port?: int = 8080
    debug?: bool = false
    maxRetries?: int = 3
}

// Class with optional fields AND default values
OptionalWithDefaults {
    id: u32
    name: string
    role?: string = "user"
    active?: bool = true
    score?: int = 0
}

// Nested classes
Geo {
    lat: string
    lng: string
}

Address {
    street: string
    city: string
    zipcode: string
    geo?: Geo
}

Company {
    name: string
    catchPhrase?: string
}

// Complex class with everything
User {
    id: u32
    name: string
    username?: string
    email: string
    address?: Address
    company?: Company
    website?: string = "example.com"
    verified?: bool = false
}

main() {
    console.log("=== JSON Typed Parsing - Comprehensive Tests ===\n")
    
    // Test 1: Basic types
    console.log("Test 1: Basic types")
    let basicJson = "{\"int8\": 127, \"int16\": 32767, \"int32\": 2147483647, \"int64\": 9223372036854775807, \"uint8\": 255, \"uint16\": 65535, \"uint32\": 4294967295, \"uint64\": 18446744073709551615, \"float32\": 3.14, \"float64\": 2.718281828, \"text\": \"hello\", \"flag\": true}"
    let basic: BasicTypes, err1 = JSON.parse(basicJson)
    if err1 != "" {
        console.log($"❌ Error: {err1}")
    } else {
        console.log($"✅ Parsed basic types: int32={basic.int32}, float32={basic.float32}, text={basic.text}")
    }
    console.log("")
    
    // Test 2: Optional fields - all present
    console.log("Test 2: Optional fields - all present")
    let optJson1 = "{\"id\": 1, \"name\": \"Alice\", \"email\": \"alice@example.com\", \"age\": 30, \"verified\": true}"
    let opt1: OptionalFields, err2 = JSON.parse(optJson1)
    if err2 != "" {
        console.log($"❌ Error: {err2}")
    } else {
        console.log($"✅ All fields present: id={opt1.id}, name={opt1.name}")
    }
    console.log("")
    
    // Test 3: Optional fields - some missing
    console.log("Test 3: Optional fields - some missing")
    let optJson2 = "{\"id\": 2, \"name\": \"Bob\"}"
    let opt2: OptionalFields, err3 = JSON.parse(optJson2)
    if err3 != "" {
        console.log($"❌ Error: {err3}")
    } else {
        console.log($"✅ Some fields missing: id={opt2.id}, name={opt2.name} (optional fields are None)")
    }
    console.log("")
    
    // Test 4: Optional fields - null values
    console.log("Test 4: Optional fields - null values")
    let optJson3 = "{\"id\": 3, \"name\": \"Carol\", \"email\": null, \"age\": 25, \"verified\": null}"
    let opt3: OptionalFields, err4 = JSON.parse(optJson3)
    if err4 != "" {
        console.log($"❌ Error: {err4}")
    } else {
        console.log($"✅ Null values handled: id={opt3.id}, name={opt3.name}")
    }
    console.log("")
    
    // Test 5: Default values - empty JSON
    console.log("Test 5: Default values - empty JSON")
    let defJson1 = "{}"
    let def1: DefaultValues, err5 = JSON.parse(defJson1)
    if err5 != "" {
        console.log($"❌ Error: {err5}")
    } else {
        console.log("✅ All defaults used successfully")
    }
    console.log("")
    
    // Test 6: Default values - partial override
    console.log("Test 6: Default values - partial override")
    let defJson2 = "{\"port\": 3000, \"debug\": true}"
    let def2: DefaultValues, err6 = JSON.parse(defJson2)
    if err6 != "" {
        console.log($"❌ Error: {err6}")
    } else {
        console.log("✅ Partial override successful")
    }
    console.log("")
    
    // Test 7: Optional with defaults - field missing
    console.log("Test 7: Optional with defaults - field missing")
    let optDefJson1 = "{\"id\": 1, \"name\": \"Dave\"}"
    let optDef1: OptionalWithDefaults, err7 = JSON.parse(optDefJson1)
    if err7 != "" {
        console.log($"❌ Error: {err7}")
    } else {
        console.log("✅ Missing optional fields use defaults")
    }
    console.log("")
    
    // Test 8: Optional with defaults - null overrides default
    console.log("Test 8: Optional with defaults - null overrides default")
    let optDefJson2 = "{\"id\": 2, \"name\": \"Eve\", \"role\": null, \"active\": null}"
    let optDef2: OptionalWithDefaults, err8 = JSON.parse(optDefJson2)
    if err8 != "" {
        console.log($"❌ Error: {err8}")
    } else {
        console.log("✅ Null overrides defaults")
    }
    console.log("")
    
    // Test 9: Nested classes - full
    console.log("Test 9: Nested classes - full")
    let nestedJson = "{\"id\": 1, \"name\": \"Alice\", \"username\": \"alice123\", \"email\": \"alice@example.com\", \"address\": {\"street\": \"123 Main St\", \"city\": \"NYC\", \"zipcode\": \"10001\", \"geo\": {\"lat\": \"40.7128\", \"lng\": \"-74.0060\"}}, \"company\": {\"name\": \"ACME Corp\", \"catchPhrase\": \"Innovation\"}, \"verified\": true}"
    let user1: User, err9 = JSON.parse(nestedJson)
    if err9 != "" {
        console.log($"❌ Error: {err9}")
    } else {
        console.log($"✅ Nested classes parsed successfully")
        console.log($"   Name: {user1.name}, Email: {user1.email}")
    }
    console.log("")
    
    // Test 10: Nested classes - optional missing
    console.log("Test 10: Nested classes - optional missing")
    let nestedJson2 = "{\"id\": 2, \"name\": \"Bob\", \"email\": \"bob@example.com\"}"
    let user2: User, err10 = JSON.parse(nestedJson2)
    if err10 != "" {
        console.log($"❌ Error: {err10}")
    } else {
        console.log($"✅ Optional nested missing: {user2.name}, email={user2.email}")
    }
    console.log("")
    
    // Test 11: Array of classes
    console.log("Test 11: Array of classes")
    let arrayJson = "[{\"id\": 1, \"name\": \"Alice\", \"email\": \"alice@example.com\"}, {\"id\": 2, \"name\": \"Bob\", \"email\": \"bob@example.com\", \"username\": \"bobby\"}, {\"id\": 3, \"name\": \"Carol\", \"email\": \"carol@example.com\"}]"
    let users: [User], err11 = JSON.parse(arrayJson)
    if err11 != "" {
        console.log($"❌ Error: {err11}")
    } else {
        console.log($"✅ Array of {users.len()} users parsed successfully")
    }
    console.log("")
    
    // Test 12: Parallel forEach with destructuring
    console.log("Test 12: Parallel forEach with destructuring")
    users.parvec().forEach(({id, name}) => {
        console.log($"   User {id}: {name}")
    })
    console.log("")
    
    console.log("=== All tests completed! ===")
}
