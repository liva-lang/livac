// Tipos avanzados de Rust
main() {
    // Tipos enteros adicionales
    let i8_val: i8 = 127
    let i16_val: i16 = 32767
    let i32_val: i32 = 2147483647
    let i64_val: i64 = 9223372036854775807
    let i128_val: i128 = 1000000000000000000i128

    // Tipos enteros sin signo
    let u8_val: u8 = 255
    let u16_val: u16 = 65535
    let u32_val: u32 = 4294967295u32
    let u64_val: u64 = 1000000000000u64
    let u128_val: u128 = 1000000000000000000u128

    // Tipos de tamaño específico
    let isize_val: isize = 1000000000000
    let usize_val: usize = 1000000000000

    // Tipos flotantes de precisión simple
    let f32_val: f32 = 3.14f32
    let f64_val: f64 = 2.718281828f64

    // Caracteres especiales
    let char_a: char = 'A'
    let char_b: char = 'B'
    let char_z: char = 'Z'
    let char_space: char = ' '

    // Bytes
    let bytes_val: bytes = [72, 101, 108, 108, 111]  // "Hello" en ASCII

    // Tipos genéricos básicos
    let optional: Option<string> = Some("hello")
    let optional_none: Option<number> = None
    let result_ok: Result<number, string> = Ok(42)
    let result_err: Result<string, string> = Err("error")

    // Arrays con tipos específicos
    let int_array = [1, 2, 3, 4, 5]  // Se infiere como i32[]
    let str_array = ["a", "b", "c"]   // Se infiere como string[]

    print("All advanced types parsed successfully")
}
