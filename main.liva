// ============================================================================
// LIVA COMPREHENSIVE SYNTAX DEMONSTRATION
// ============================================================================
// This file demonstrates all major Liva language features for testing

// ============================================================================
// FUNCTIONS (One-liner style)
// ============================================================================

add(a, b) => a + b
multiply(x, y) => x * y
isAdult(age) => age >= 18

// Block function
calculateTotal(items) {
  let total = 0.0
  for item in items {
    total = total + item.price
  }
  return total
}

// Async helpers for concurrency demos
fetchUser(id: number): string {
  print($"üì° Fetching user {id}...")
  return $"User {id}"
}

heavyComputation(value: number): number {
  let result = value * value
  print($"üß† Heavy computation for {value} finished with {result}")
  return result
}

logEvent(msg: string) {
  print($"[LOG] {msg}")
}

backgroundCleanup() {
  print("üßπ Background cleanup running")
}

// ============================================================================
// MAIN APPLICATION
// ============================================================================

main() {
  // ============================================================================
  // 1. VARIABLES AND CONSTANTS ‚úÖ
  // ============================================================================

  // Basic types and variables
  let name = "Liva User"
  let age = 25
  let height = 1.75
  let isActive = true

  // Constants
  const MAX_USERS = 100
  const API_VERSION = "v1.0"

  print("üöÄ Liva Comprehensive Syntax Test Starting...\n")

  // ============================================================================
  // VARIABLES AND CONSTANTS DEMO ‚úÖ
  // ============================================================================
  print("üìä Testing Variables and Constants:")
  print($"Name: {name}, Age: {age}, Height: {height}")
  print($"Active: {isActive}")
  print($"Max users: {MAX_USERS}, API version: {API_VERSION}\n")

  // ============================================================================
  // 2. FUNCTION CALLS DEMO ‚úÖ
  // ============================================================================
  print("üîß Testing Function Calls:")

  let sum = add(10, 15)
  let product = multiply(4, 6)
  let adult = isAdult(age)

  print($"10 + 15 = {sum}")
  print($"4 * 6 = {product}")
  print($"Is adult: {adult}\n")

  // ============================================================================
  // 3. STRING TEMPLATES DEMO ‚úÖ
  // ============================================================================
  print("üìù Testing String Templates:")

  let greeting = $"Hello {name}! You are {age} years old."
  let status = "User is active"

  print(greeting)
  print(status)

  // ============================================================================
  // 4. ARITHMETIC OPERATIONS DEMO ‚úÖ
  // ============================================================================
  print("üßÆ Testing Arithmetic Operations:")

  let calculations = [
    10 + 5,
    20 - 8,
    6 * 7,
    100 / 4,
    17 % 3
  ]

  print($"Calculations: {calculations}")

  // ============================================================================
  // 5. LOGICAL OPERATORS DEMO ‚úÖ
  // ============================================================================
  print("üîÄ Testing Logical Operators:")

  let canVote = age >= 18 and isActive
  let shouldShow = age > 21 or isActive

  print($"Can vote: {canVote}")
  print($"Should show: {shouldShow}")

  // ============================================================================
  // 6. CONTROL FLOW DEMO ‚úÖ
  // ============================================================================
  print("üîÑ Testing Control Flow:")

  // If/else with logical operators
  if age >= 18 and isActive {
    print("‚úÖ User can vote and is active")
  } else if age >= 18 {
    print("‚ö†Ô∏è User can vote but is inactive")
  } else {
    print("‚ùå User cannot vote")
  }

  // For loop with range
  print("\nCounting to 5:")
  for i in 1..6 {
    print($"Count: {i}")
  }

  // While loop
  let counter = 0
  while counter < 3 {
    print($"While iteration: {counter}")
    counter = counter + 1
  }

  // Switch statement
  let userType = "premium"
  switch userType {
    case "premium": print("üëë Premium user")
    case "standard": print("üÜì Standard user")
    case "guest": print("üë§ Guest user")
    default: print("‚ùì Unknown user type")
  }

  print()

  // ============================================================================
  // 7. ARRAYS AND OBJECTS DEMO ‚úÖ
  // ============================================================================
  print("üì¶ Testing Arrays and Objects:")

  // Simple array
  let numbers = [1, 2, 3, 4, 5]

  // Array of objects
  let users = [
    { name: "Alice", age: 25 },
    { name: "Bob", age: 30 },
    { name: "Charlie", age: 35 }
  ]

  print($"Numbers: {numbers}")
  print($"Users count: {users.length}")
  print($"First user: {users[0].name} and his age is {users[0].age}")

  // ============================================================================
  // 8. BLOCK FUNCTIONS DEMO ‚úÖ
  // ============================================================================
  print("üèóÔ∏è Testing Block Functions:")

  let products = [
    { name: "Laptop", price: 999.99 },
    { name: "Book", price: 19.99 },
    { name: "Coffee", price: 4.50 }
  ]

  let totalPrice = calculateTotal(products)  // Note: compiler should handle reference
  print($"Total price: ${totalPrice}")

  // ============================================================================
  // 9. CONCURRENCY FEATURES ‚úÖ
  // ============================================================================
  print("\n‚öôÔ∏è Testing Concurrency Features:")

  let asyncUser = async fetchUser(1)
  let parallelResult = par heavyComputation(12)

  let taskUser = task async fetchUser(2)
  let taskCompute = task par heavyComputation(8)

  fire async logEvent($"Fire-and-forget async event triggered")
  fire par backgroundCleanup()

  print($"Async user value: {asyncUser}")
  print($"Parallel result (lazy join): {parallelResult}")

  let _taskUserResult = await taskUser
  let _taskComputeResult = await taskCompute

  print("Task handles awaited successfully ‚úÖ")

  print("\nüéâ Liva Comprehensive Syntax Test Completed Successfully!")
  print("‚úÖ All major language features tested and working!")
}
